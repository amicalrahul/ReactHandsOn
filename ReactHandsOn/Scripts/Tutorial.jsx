//var data = [
//    { Id: 1, Author: "Daniel Lo Nigro", Text: "Hello ReactJS.NET World!" },
//    { Id: 2, Author: "Pete Hunt", Text: "This is one comment" },
//    { Id: 3, Author: "Jordan Walke", Text: "This is *another* comment" }
//];
//import Remarkable from '.\external\remarkable.min.js';

class CommentBox extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            data: this.props.initialData
        };
        handleCommentSubmit = this.handleCommentSubmit.bind(this);
        loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
    }

    loadCommentsFromServer() {
        var xhr = new XMLHttpRequest();
        xhr.open('get', this.props.url, true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    };
    handleCommentSubmit(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.Id = Date.now() + comment.Text;
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments });
        var data = new FormData();
        data.append('Author', comment.Author);
        data.append('Text', comment.Text);

        var xhr = new XMLHttpRequest();
        xhr.open('post', this.props.submitUrl, true);
        xhr.onload = function () {
            this.loadCommentsFromServer();
        }.bind(this);
        xhr.send(data);
    };
    render() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
}


class CommentList extends React.Component{
    render(){
        var commentNodes = this.props.data.map(function (comment) {
            return (
                <Comment author={comment.Author} key={comment.Id}>
                    {comment.Text}
                </Comment>
                )
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
};


class CommentForm extends React.Component{
    constructor(props) {
        super(props);
        this.state = {
            author: '',
            text: ''
        };
        handleAuthorChange = this.handleAuthorChange.bind(this);
        handleTextChange = this.handleTextChange.bind(this);
        handleSubmit = this.handleSubmit.bind(this);
    }
    getInitialState() {
        return { author: '', text: '' };
    };
    handleAuthorChange(e) {
        this.setState({ author: e.target.value });
    };
    handleTextChange(e) {
        this.setState({ text: e.target.value });
    };
    handleSubmit(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
            return;
        }
        this.props.onCommentSubmit({ Author: author, Text: text });
        this.setState({ author: '', text: '' });
    };
    render(){
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={this.state.author}
                    onChange={this.handleAuthorChange}
                />
                <input
                    type="text"
                    placeholder="Say something..."
                    value={this.state.text}
                    onChange={this.handleTextChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
};
class Comment extends React.Component{
    rawMarkup() {
        var md = new (global.Remarkable || window.Remarkable)(); ;
        var rawMarkup = md.render(this.props.children.toString());
        return { __html: rawMarkup };
    };
    render() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
            </div>
        );
    }
};
//ReactDOM.render(
//    <CommentBox url="/comments" submitUrl="/comments/new" pollInterval={5000} />,
//    document.getElementById('content')
//);  