
//var CommentBox = React.createClass({
//    loadCommentsFromServer: function () {
//        var xhr = new XMLHttpRequest();
//        xhr.open('get', this.props.url, true);
//        xhr.onload = function () {
//            var data = JSON.parse(xhr.responseText);
//            this.setState({ data: data });
//        }.bind(this);
//        xhr.send();
//    },
//    getInitialState: function () {
//        return { data: [] };
//    },
//    componentDidMount: function () {
//        this.loadCommentsFromServer();
//        window.setInterval(this.loadCommentsFromServer, this.props.pollInterval);
//    },
//    handleCommentSubmit: function (comment) {
//        var comments = this.state.data;
//        // Optimistically set an id on the new comment. It will be replaced by an
//        // id generated by the server. In a production application you would likely
//        // not use Date.now() for this and would have a more robust system in place.
//        comment.Id = Date.now() + comment.Text;
//        var newComments = comments.concat([comment]);
//        this.setState({ data: newComments });
//        var data = new FormData();
//        data.append('Author', comment.Author);
//        data.append('Text', comment.Text);

//        var xhr = new XMLHttpRequest();
//        xhr.open('post', this.props.submitUrl, true);
//        xhr.onload = function () {
//            this.loadCommentsFromServer();
//        }.bind(this);
//        xhr.send(data);
//    },
//    render: function () {
//        return (
//            <div className="commentBox">
//                <h1>Comments</h1>
//                <CommentList data={this.state.data} />
//                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
//            </div>
//        );
//    }
//});
//var CommentBox = React.Component({
//    loadCommentsFromServer: function () {
//        var xhr = new XMLHttpRequest();
//        xhr.open('get', this.props.url, true);
//        xhr.onload = function () {
//            var data = JSON.parse(xhr.responseText);
//            this.setState({ data: data });
//        }.bind(this);
//        xhr.send();
//    },
//    getInitialState: function () {
//        return { data: this.props.initialData };
//    },
//    handleCommentSubmit: function (comment) {
//        var comments = this.state.data;
//        // Optimistically set an id on the new comment. It will be replaced by an
//        // id generated by the server. In a production application you would likely
//        // not use Date.now() for this and would have a more robust system in place.
//        comment.Id = Date.now() + comment.Text;
//        var newComments = comments.concat([comment]);
//        this.setState({ data: newComments });
//        var data = new FormData();
//        data.append('Author', comment.Author);
//        data.append('Text', comment.Text);

//        var xhr = new XMLHttpRequest();
//        xhr.open('post', this.props.submitUrl, true);
//        xhr.onload = function () {
//            this.loadCommentsFromServer();
//        }.bind(this);
//        xhr.send(data);
//    },
//    render: function () {
//        return (
//            <div className="commentBox">
//                <h1>Comments</h1>
//                <CommentList data={this.state.data} />
//                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
//            </div>
//        );
//    }
//});